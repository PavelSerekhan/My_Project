package Test;

import javax.sound.sampled.DataLine;
import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.*;

/**
 * –í—Å—è —Ä–∞–±–æ—Ç–∞ —Å ArrayList (–ø–æ –±–æ–ª—å—à–æ–º—É —Å—á–µ—Ç—É) —Å–≤–æ–¥–∏—Ç—Å—è –∫ —Ä–∞–±–æ—Ç–µ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –º–∞—Å—Å–∏–≤–æ–º.
 * —ç—Ç–æ –∞–Ω–∞–ª–æ–≥ –º–∞—Å—Å–∏–≤–∞, –Ω–æ —Å–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è.
 * –æ–Ω —Ö—Ä–∞–Ω–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –º–∞—Å—Å–∏–≤–µ (–µ–≥–æ —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 10 —è—á–µ–µ–∫)
 * –ö–æ–≥–¥–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∞—Å—Å–∏–≤ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤,
 * —Ä–∞–∑–º–µ—Ä –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ: <—Ä–∞–∑–º–µ—Ä–¢–µ–∫—É—â–µ–≥–æ–ú–∞—Å—Å–∏–≤–∞> * 3 / 2  + 1/
 * –î–∞–ª–µ–µ –≤ –Ω–µ–≥–æ –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ (—Å—Ç–∞—Ä–æ–≥–æ) –º–∞—Å—Å–∏–≤–∞ c –ø–æ–º–æ—â—å—é –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
 * System.arraycopy(), –∏ –ø–µ—Ä–≤—ã–π –º–∞—Å—Å–∏–≤ —É–¥–∞–ª—è–µ—Ç—Å—è.
 * –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–¥–µ—Ç –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
 * <p>
 * –û–Ω —É–º–µ–µ—Ç:
 * —Ö—Ä–∞–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
 * –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞
 * –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
 * –≤—Å—Ç–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–æ –∏ —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫–∞
 * —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ —Å–ø–∏—Å–∫–∞
 */
public class Array_List {

//    public static void main(String[] args) {
//
//        ArrayList<Cat> cats = new ArrayList<>();
//        Cat thomas = new Cat("–¢–æ–º–∞—Å");
//        Cat behemoth = new Cat("–ë–µ–≥–µ–º–æ—Ç");
//        Cat philipp = new Cat("–§–∏–ª–∏–ø–ø –ú–∞—Ä–∫–æ–≤–∏—á");
//        Cat pushok = new Cat("–ü—É—à–æ–∫");
//
//        cats.add(thomas);
//        cats.add(behemoth);
//        cats.add(philipp);
//        cats.add(pushok);
//        cats.add(new Cat("Enot"));

//        cats.set(0,new Cat("Vasia"));
//        cats.add(0, new Cat("Vasia"));
//        System.out.println(cats);
//        System.out.println(cats.size());


//        int thomasIndex = cats.indexOf(thomas);
//        cats.remove(3);
//        System.out.println(thomasIndex);
//        System.out.println(cats.indexOf(pushok));
//        System.out.println(cats.get(3));
//        System.out.println(cats.contains("plia"));
//        System.out.println(cats.contains(philipp));
//        System.out.println(cats.indexOf(philipp));

    /**
     * –í –∫–ª–∞—Å—Å–µ Solution –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ waitingEmployees,
     * –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—É—Ç –∑–∞—Ä–ø–ª–∞—Ç—É, –∏ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ alreadyGotSalaryEmployees, –∫–æ—Ç–æ—Ä—ã–µ –µ—ë
     * —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ paySalary(String), –∫–æ—Ç–æ—Ä—ã–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ
     * –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∂–µ–ª–∞—é—â–µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É.
     * –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–∫–µ waitingEmployees, –∏ –µ—Å–ª–∏ –æ–Ω
     * –Ω–µ –ø–æ–ª—É—á–∞–ª –∑–∞—Ä–ø–ª–∞—Ç—É, –≤—ã–¥–∞—Ç—å –µ—ë:
     * –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ—Ç–æ–¥–∞ paySalary(String) —Ä–∞–≤–Ω—è–µ—Ç—Å—è null, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å.
     * –î–æ–±–∞–≤–∏—Ç—å –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ alreadyGotSalaryEmployees.
     * –í —Å–ø–∏—Å–∫–µ waitingEmployees –∑–∞–º–µ–Ω–∏—Ç—å –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ null.
     */
//    public static ArrayList<String> waitingEmployees = new ArrayList<>();
//    public static ArrayList<String> alreadyGotSalaryEmployees = new ArrayList<>();
//
//    public static void initEmployees() {
//        waitingEmployees.add("–ì–≤–∏–Ω–Ω–æ");
//        waitingEmployees.add("–ì—É–Ω–∏–≥–µ—Ä–¥");
//        waitingEmployees.add("–ë–æ—Ä–≥–µ–ª–µ–π—Ñ");
//        waitingEmployees.add("–ù–∏—Ñ—Ä–æ–¥");
//        waitingEmployees.add("–ê–ª—å–±–∏—É—Ñ");
//        waitingEmployees.add("–ò–Ω–æ–≥—Ä–∏–º");
//        waitingEmployees.add("–§—Ä–∏–ª–µ");
//    }
//
//    public static void main(String[] args) {
//        initEmployees();
//    }
//
//    public static void paySalary(String name) {
//        if (waitingEmployees.contains(name) && name != null){
//            alreadyGotSalaryEmployees.add(name);
//            waitingEmployees.set(waitingEmployees.indexOf(name), null);
//
//        }
//    }


//    public static void main(String[] args) {
//        ArrayList<Integer> list = new ArrayList<>();
//        for (int i = 1; i <= 20; i++) {
//            if (i % 2 == 0) {
//                list.add(i);
//            }
//        }
//        for (int j = 0; j < list.size(); j++) {
//            if (list.get(j) % 4 == 0) {
//                list.remove(j);
//                j--;
//            }
//            System.out.print(list.get(j) + " ");
//        }
//
//    }


//   ` public static void main(String[] args) {
//        ArrayList<Integer> list = new ArrayList<>();
//        list.add(1);
//        list.add(2);
//        list.add(3);
//        list.add(4);
//        list.add(5);
//        System.out.println(list);
//
//        list.add(1,9); // —Å–¥–≤–∏–≥–∞–µ—Ç –≤–µ—Å—å list
//        System.out.println(list);
//
//        System.out.println(list.get(1));
//        list.set(0,8);
//        System.out.println(list);
//
//        list.remove(5);
//        System.out.println(list);
//
//        System.out.println(list.contains(9));
//    }


//    public static ArrayList<String> planets = new ArrayList<>();
//    public static void main(String[] args) {
//        addPlanets();
//        print();
//        createNewPlanet("–ó–≤–µ–∑–¥–∞ –°–º–µ—Ä—Ç–∏");
//        print();
//    }
//    public static void createNewPlanet(String planetName){
//        planets.add(3, planetName);
//    }
//    public static void addPlanets() {
//        planets.add("–ú–µ—Ä–∫—É—Ä–∏–π");
//        planets.add("–í–µ–Ω–µ—Ä–∞");
//        planets.add("–ó–µ–º–ª—è");
//        planets.add("–ú–∞—Ä—Å");
//        planets.add("–Æ–ø–∏—Ç–µ—Ä");
//        planets.add("–°–∞—Ç—É—Ä–Ω");
//        planets.add("–£—Ä–∞–Ω");
//        planets.add("–ù–µ–ø—Ç—É–Ω");
//    }
//
//    public static void print() {
//        for (int i = 0; i < planets.size(); i++) {
//            System.out.println(String.format("%s - %d - —è –ø–ª–∞–Ω–µ—Ç–∞ –æ—Ç –°–æ–ª–Ω—Ü–∞",
//                    planets.get(i), (i + 1)));
//        }
//        System.out.println();
//    }


//    public static ArrayList<String> programmingLanguages = new ArrayList<>(Arrays.asList(
//            "C", "C++", "Python", "JavaScript",
//            "Ruby", "Java", "Pascal"));
//
//    public static void main(String[] args) {
////        programmingLanguages.remove("Pascal");
////        System.out.println(programmingLanguages);
//
//        Iterator<String> iterator = programmingLanguages.iterator();
//        while (iterator.hasNext()){
//           String pr = iterator.next();
//            if (pr.equals("Pascal")){
//                iterator.remove();
//            }
//        }
//        System.out.println(programmingLanguages);

//        for (int i = 0; i < programmingLanguages.size(); i++) {
//            if (programmingLanguages.get(i).equals("Pascal")){
//                programmingLanguages.remove(i);
//            }
//            System.out.println(programmingLanguages);
//        }
//    }


//    public static void main(String[] args) {
//        ArrayList<Integer> list = new ArrayList<>();
//        for (int i = 0; i <= 20 ; i++) {
//            if (i % 2 == 0){
//                list.add(i);
//            }
//        }
//        for (int i = 0; i < list.size(); i++) {
//            if (list.get(i) % 4 == 0){
//                list.remove(i);
//                i--;
//            }
//        }
//        System.out.println(list);
//    }

//    private static ArrayList<String> initList() {
//        String glassTop = "       üç∑       ";
//        String glassSecond = "      üç∑üç∑      ";
//        String glassThird = "     üç∑üç∑üç∑     ";
//        String glassFourth = "    üç∑üç∑üç∑üç∑    ";
//        String glassFifth = "   üç∑üç∑üç∑üç∑üç∑   ";
//        String glassSixth = "  üç∑üç∑üç∑üç∑üç∑üç∑  ";
//        String glassSeventh = " üç∑üç∑üç∑üç∑üç∑üç∑üç∑ ";
//        String glassEighth = "üç∑üç∑üç∑üç∑üç∑üç∑üç∑üç∑";
//
//        ArrayList<String> list = new ArrayList<>();
//        list.add(glassEighth);
//        list.add(glassSeventh);
//        list.add(glassSixth);
//        list.add(glassFifth);
//        list.add(glassFourth);
//        list.add(glassThird);
//        list.add(glassSecond);
//        list.add(glassTop);
//        return list;
//    }
//
//    public static void print(ArrayList<String> glasses) {
//        for (int i = glasses.size() - 1; i >= 0; i--) {
//            System.out.println(glasses.get(i));
//        }
//    }
//
//    public static void removeGlassesReverse(ArrayList<String> glasses) {
//        System.out.println("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å –ø–∏—Ä–∞–º–∏–¥—É...");
//        //–Ω–∞–ø–∏—à–∏—Ç–µ —Ç—É—Ç –≤–∞—à –∫–æ–¥
//        for (int i = glasses.size() - 1; i >= 0; i--){
//            glasses.remove(i);
//        }
//        if (glasses.size() == 0) {
//            System.out.println("–ü–∏—Ä–∞–º–∏–¥–∞ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞!");
//        }
//    }
//
//    public static void main(String[] args) {
//        ArrayList<String> glasses = initList();
//        print(glasses);
//
//        removeGlassesReverse(glasses);
//        print(glasses);
//    }


//    public static void main(String[] args) {

//        Integer a = 5;
//        int b = a;
//        var str = "Hello";
//        var s = 5;
//        var list = new ArrayList<String>();


//        var string = new ArrayList<String>() {{
//            add("–¢–∞–∫");
//            add("—Ç–æ–∂–µ");
//            add("–º–æ–∂–Ω–æ");
//            add("–¥–µ–ª–∞—Ç—å");
//            add("!");
//        }};
//    }
    public static void main(String[] args) {
        ArrayList<String> words = new ArrayList<>();
        words.add("Hello world!");
        words.add("Amigo");
        words.add("Elly");
        words.add("Kerry");
        words.add("Bug");
        words.add("bug");
        words.add("Easy ug");
        words.add("Risha");

        ArrayList<String> copyWordsFirst = new ArrayList<>(words);
        ArrayList<String> copyWordsSecond = new ArrayList<>(words);
        ArrayList<String> copyWordsThird = new ArrayList<>(words);

        removeBugWithFor(copyWordsFirst);

        removeBugWithWhile(copyWordsSecond);

        removeBugWithCopy(copyWordsThird);

        copyWordsFirst.forEach(System.out::println);
        String line = "_________________________";
        System.out.println(line);

        copyWordsSecond.forEach(System.out::println);
        System.out.println(line);

        copyWordsThird.forEach(System.out::println);
        System.out.println(line);
    }

    public static void removeBugWithFor(ArrayList<String> list) {
        //–Ω–∞–ø–∏—à–∏—Ç–µ —Ç—É—Ç –≤–∞—à –∫–æ–¥
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).equalsIgnoreCase("bug")) {
                list.remove(list.get(i));
                i--;
            }
        }
    }

    public static void removeBugWithWhile(ArrayList<String> list) {
        //–Ω–∞–ø–∏—à–∏—Ç–µ —Ç—É—Ç –≤–∞—à –∫–æ–¥
        Iterator<String> iterator = list.iterator();
        while (iterator.hasNext()) {
            String str = iterator.next();
            if (str.equalsIgnoreCase("bug")) {
                iterator.remove();
            }
        }
    }

    public static void removeBugWithCopy(ArrayList<String> list) {
        //–Ω–∞–ø–∏—à–∏—Ç–µ —Ç—É—Ç –≤–∞—à –∫–æ–¥
        ArrayList<String> each = new ArrayList<>(list);

        for (String str : each) {
            if (str.equalsIgnoreCase("bug")) {
                list.remove(str);
            }

        }
    }
}

