package abstract_abstract;
/**
 * Абстрактный класс похож на обычный класс. В абстрактном классе также можно определить поля
 * и методы, но в то же время нельзя создать объект или экземпляр абстрактного класса.
 * Абстрактные классы призваны предоставлять базовый функционал для классов-наследников.
 * А производные классы уже реализуют этот функционал. При определении абстрактных классов
 * используется ключевое слово abstract.
 *
 * Кроме обычных методов абстрактный класс может содержать абстрактные методы.
 * Производный класс обязан переопределить и реализовать все абстрактные методы, которые имеются
 * в базовом абстрактном классе. Также следует учитывать, что если класс имеет хотя бы один
 * абстрактный метод, то данный класс должен быть определен как абстрактный.
 *
 * Зачем нужны абстрактные классы? Допустим, мы делаем программу для обслуживания банковских
 * операций и определяем в ней три класса: Person, который описывает человека, Employee, который
 * описывает банковского служащего, и класс Client, который представляет клиента банка. Очевидно,
 * что классы Employee и Client будут производными от класса Person, так как оба класса имеют
 * некоторые общие поля и методы. И так как все объекты будут представлять либо сотрудника, либо
 * клиента банка, то напрямую мы от класса Person создавать объекты не будем. Поэтому имеет смысл
 * сделать его абстрактным.
 *
 * Но главное отличие состоит в том, что мы не можем использовать конструктор абстрактного класса
 * для создания его объекта. Например, следующим образом: Human h = new Human();
 *
 *
 */

abstract class Person {
    private String name;

    public String getName() {
        return name;
    }

    public Person(String name) {
        this.name = name;
    }

    public abstract void display();
}
